{"ast":null,"code":"import { toast } from \"react-hot-toast\";\nexport default async function login(e) {\n  let response = await fetch('http://localhost:2000/api/token/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'email': e.target.email.value,\n      'password': e.target.password.value\n    })\n  });\n  if (r.status === 200) {\n    const data = await response.json();\n    localStorage.setItem('authToken', JSON.stringify(data));\n    toast.success('Login Success');\n    return data;\n  } else {\n    toast.error('Invalid User Credential');\n    throw new Error('Invalid User Credential'); // Optionally, throw an error to handle it outside the function.\n  }\n}\n\nexport function getLocal() {\n  let response = localStorage.getItem('authToken');\n  return response;\n}","map":{"version":3,"names":["toast","login","e","response","fetch","method","headers","body","JSON","stringify","target","email","value","password","r","status","data","json","localStorage","setItem","success","error","Error","getLocal","getItem"],"sources":["C:/Users/MOHAMMED SHAHID KM/Desktop/brototype/python/React-django-mini-application/frontend/src/helpers/auth.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\r\n\r\nexport default async function login(e){\r\n\r\n    let response = await fetch('http://localhost:2000/api/token/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body: JSON.stringify({'email': e.target.email.value, 'password': e.target.password.value})\r\n            })\r\n\r\n            if (r.status === 200) {\r\n                const data = await response.json();\r\n                localStorage.setItem('authToken', JSON.stringify(data));\r\n                toast.success('Login Success');\r\n                return data;\r\n              } else {\r\n                toast.error('Invalid User Credential');\r\n                throw new Error('Invalid User Credential'); // Optionally, throw an error to handle it outside the function.\r\n              }\r\n            \r\n  }\r\n\r\n\r\nexport function getLocal(){\r\n    let response = localStorage.getItem('authToken');\r\n    return response;\r\n}\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iBAAiB;AAEvC,eAAe,eAAeC,KAAKA,CAACC,CAAC,EAAC;EAElC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IACnDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAC;IACnB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAC,OAAO,EAAEP,CAAC,CAACQ,MAAM,CAACC,KAAK,CAACC,KAAK;MAAE,UAAU,EAAEV,CAAC,CAACQ,MAAM,CAACG,QAAQ,CAACD;IAAK,CAAC;EAC7F,CAAC,CAAC;EAEF,IAAIE,CAAC,CAACC,MAAM,KAAK,GAAG,EAAE;IAClB,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClCC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEX,IAAI,CAACC,SAAS,CAACO,IAAI,CAAC,CAAC;IACvDhB,KAAK,CAACoB,OAAO,CAAC,eAAe,CAAC;IAC9B,OAAOJ,IAAI;EACb,CAAC,MAAM;IACLhB,KAAK,CAACqB,KAAK,CAAC,yBAAyB,CAAC;IACtC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;EAC9C;AAEZ;;AAGF,OAAO,SAASC,QAAQA,CAAA,EAAE;EACtB,IAAIpB,QAAQ,GAAGe,YAAY,CAACM,OAAO,CAAC,WAAW,CAAC;EAChD,OAAOrB,QAAQ;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}